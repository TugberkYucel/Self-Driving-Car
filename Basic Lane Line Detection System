import matplotlib.pyplot as plt
import numpy as np
import cv2 as cv
import math
def do_canny(frame):
    threshold_1 = 50
    threshold_2 = 150
    gray = cv.cvtColor(frame, cv.COLOR_RGB2GRAY)
    blur = cv.GaussianBlur(gray, (7, 7), 0)
    canny = cv.Canny(blur, threshold_1, threshold_2)
    return canny
def do_segment(frame):
    verticals = np.array([[(115,600),(515, 300), (600, 300), (1180,650)]], dtype=np.int32)
    mask = np.zeros_like(frame)
    cv.fillPoly(mask, verticals, 255)
    segment = cv.bitwise_and(frame, mask)
    return segment
def calculate_lines(frame, lines):
    left = []
    right = []
    if lines is not None:
        for line in lines:
            x1, y1, x2, y2 = line.reshape(4)
            parameters = np.polyfit((x1, x2), (y1, y2), 1)
            slope = parameters[0]
            y_intercept = parameters[1]
            if slope < 0:
                left.append((slope, y_intercept))
            else:
                right.append((slope, y_intercept))
        left_avg = np.average(left, axis = 0)
        right_avg = np.average(right, axis = 0)
        left_line = calculate_coordinates(frame, left_avg)
        right_line = calculate_coordinates(frame, right_avg)
        return np.array([left_line, right_line])
def calculate_coordinates(frame, parameters):    
    try:     
        slope, intercept = parameters
    except TypeError:
        slope, intercept = 0.001, 0
    y1 = frame.shape[0]
    y2 = int(y1* 3/6)
    x1 = int((y1 - intercept) / slope )
    x2 = int((y2 - intercept) / slope )
    return np.array([x1, y1, x2, y2])
def visualize_lines(frame, lines):
    lines_visualize = np.zeros_like(frame)
    if lines is not None:
        for x1, y1, x2, y2 in lines:
            cv.line(lines_visualize, (x1, y1), (x2, y2), (0, 255, 0), 5)
    return lines_visualize
def display_heading_line(frame, steering_angle, line_color=(0, 0, 255), line_width=5):
    heading_image= np.zeros_like(frame)
    height, width, _ = frame.shape
    steering_angle_radian = steering_angle / 180.0 * math.pi
    x1 = int(width / 2)
    y1 = height
    x2 = int(x1-height / 2 /math.tan(steering_angle_radian))
    y2 = int(height /2)
    cv.line(heading_image, (x1,y1), (x2,y2), line_color, line_width)
    heading_image = cv.addWeighted(frame, 0.8, heading_image, 1,1)
    return heading_image   
cap = cv.VideoCapture("Lane_Detect_Test_Data.mp4")
while (cap.isOpened()):
    ret, frame = cap.read()
    canny = do_canny(frame)
    cv.imshow("canny", canny)
    segment = do_segment(canny)
    cv.imshow("segment", segment)
    rho = 2           
    theta = np.pi/180  
    threshold = 100     
    min_line_len = 20  
    max_line_gap = 75  
    hough = cv.HoughLinesP(segment, rho, theta, threshold, np.array([]), minLineLength=min_line_len, maxLineGap=max_line_gap)
    lines = calculate_lines(frame, hough)
    lines_visualize = visualize_lines(frame, lines)
    cv.imshow("hough", lines_visualize)
    output = cv.addWeighted(frame, 0.9, lines_visualize, 1, 1)
    cv.imshow("output", output)
    height, width, _ = frame.shape
    _, _, left_x2, _ = lines[0]
    _, _, right_x2, _ = lines[1]
    mid = int(width / 2)
    x_offset = (left_x2 + right_x2) / 2 - mid
    y_offset = int(height / 2)
    angle_to_mid_radian = math.atan(x_offset / y_offset)  
    angle_to_mid_deg = int(angle_to_mid_radian * 180.0 / math.pi)  
    steering_angle = angle_to_mid_deg + 90  
    heading_image=display_heading_line(output, steering_angle, line_color=(0, 0, 255), line_width=5)
    cv.imshow("heading_image", heading_image)
    if cv.waitKey(10) & 0xFF == ord('q'):
        break
cap.release()
cv.destroyAllWindows()    
